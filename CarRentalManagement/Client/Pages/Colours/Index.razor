@page "/colours/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

<h3 class="card-title">Car Colours</h3>
<br />

@if (Colours == null)
{
    <div class="alert alert-info">Loading Colours...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Name</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var make in Colours)
            {
                <tr>
                    <td>@make.Name</td>
                    <td>
                        <a href="/Colours/view/@make.Id" class="btn btn-primary">
                            <span class="=oi oi-book"></span>
                        </a>

                        <a href="/Colours/edit/@make.Id" class="btn btn-warning">
                            <span class="=oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(make.Id))">
                            <span class="oi oi-delete"></span>
                        </button>

                    </td>
                </tr>
            }
        </tbody>

    </table>

}

@code {

    private List<Make> Colours;
    protected async override Task OnInitializedAsync()
    {
        Colours = await _client.GetFromJsonAsync<List<Make>>($"{Endpoints.ColoursEndpoint}");
    }
    async Task Delete(int makeId)
    {
        var make = Colours.First(q => q.Id == makeId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {make.Name}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.ColoursEndpoint}/{makeId}");
            await OnInitializedAsync();
        }

    }


}
